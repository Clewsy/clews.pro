<!DOCTYPE html>
<html>
	<head>
		<?php include("$_SERVER[DOCUMENT_ROOT]/includes/head.html"); ?>
	</head>
	<body>
		<?php include("$_SERVER[DOCUMENT_ROOT]/includes/header.html"); ?>
<!-- Above here can be copied for a consistent header across pages -->
		<div id="page">
			<h2 class="align-center">Contributions</h2>
			<p>Here are some projects that are not mine, but have accepted contributions from me.  This is what I love about the open source community. :)</p>
			<hr />
			<h3><a href="https://github.com/rcdailey/nextcloud-cronjob">nextcloud-cronjob</a> | <a href="https://github.com/rcdailey/nextcloud-cronjob/pull/4">Pull Request</a> | <a href="https://github.com/rcdailey/nextcloud-cronjob/pull/4/commits/9364ae75e18242b383d90a72b664a9c9d3d58ecf">Commit</a></h3>
			<p><a href="https://nextcloud.com/">Nextcloud</a> is a fantastic tool.  My <a href="https://clews.pro/projects/clews.php">self-hosted</a> delpoyment of Nextcloud is implemented with a <a href=https://www.docker.com/">Docker</a> container <a href="https://hub.docker.com/_/nextcloud">image</a>.</p>
			<p>A non-containerised Nexcloud installation requires a cronjob to execute a php script "<a href="https://github.com/nextcloud/server/blob/master/cron.php">cron.php</a>".  The script is needed to run any background tasks for installed Nextcloud apps.  For a containerised version of Nextcloud, there are a few possible methods for the routine execution of cron.php.</p>
			<p>The method I went with was another container image called "<a href="https://github.com/rcdailey/nextcloud-cronjob">nextcloud-cronjob</a>" (<a href="https://hub.docker.com/r/rcdailey/nextcloud-cronjob">dockerhub link</a>) created by <a href="https://github.com/rcdailey">Robert Dailey</a>.  I liked this solution mostly becuse I understood how it worked at a time when I was just beginning to learn about Docker.  It also has the benefit of not requiring the Nextcloud container to be run by the root user.</p>
			<p>I used the nextcloud-cronjob source <a href="https://github.com/rcdailey/nextcloud-cronjob/blob/master/Dockerfile">dockerfile</a> as a starting-point when I wanted to learn how to create my own docker image for <a href="https://clews.pro/projects/ncbu.php">ncbu</a>.  My project had similar requirements - run a command at defined intervals, and access other containers.<p>
			<p>After getting ncbu working to my sattisfaction, I began investigating techniques to improve the efficiency by reducing the image size and reducing the build time.  Initially my ncbu dockerfile would install the "<a href="https://pkgs.alpinelinux.org/package/edge/community/x86_64/docker">docker</a>" package in order to provide the ability of accessing other docker containers via the "docker exec" command within scripts.  In researching efficiencies, I learned that instead of installing the docker package and all its dependencies, all I needed was one of said dependencies - a package called "<a href="https://pkgs.alpinelinux.org/package/edge/community/x86_64/docker-cli">docker-cli</a>" which provides the "docker exec" capability.  This change reduced the size of the ncbu image by over 200MB.</p>
			<p>After this revelation and improvement, I decided to fork nextcloud-cronjob and test the same change for that image.  It appeared to work with no issues so I submitted the pull-request.  After some discussion with rcdailey, the simple <a href="https://github.com/rcdailey/nextcloud-cronjob/commit/e90dcc60d206c21749f8b8bc054e045cb3867446">commit</a> was accepted and the <a href="https://github.com/rcdailey/nextcloud-cronjob/pull/4">PR merged</a> which reduced the nextcloud-cronjob image size from 324BM to 83MB (~75% reduction).</p>
			<hr />

			<h3><a href="https://github.com/hassio-addons/addon-motioneye">addon-motioneye</a> | <a href="https://github.com/hassio-addons/addon-motioneye/issues/74">issue</a> | <a href="https://github.com/hassio-addons/addon-motioneye/pull/75">Pull Request</a> | <a href="https://github.com/hassio-addons/addon-motioneye/pull/75/commits">Commits</a></h3>
			<p>At home I use a few IP cameras, mostly for monitoring animals whilst out.  I have a combination of proprietary stock and modified dedicated IP cams and raspberry pis with pi-cams and usb web-cams.</p>
			<p>After trialing a few options, I settled on <a href="https://github.com/ccrisan/motioneye/">motioneye</a> as my preferred methos of wrangling all of the camera feeds into a single interface.</p>
			<p>A useful feature of motioneye is the ability to create "<a href="https://github.com/ccrisan/motioneye/wiki/Action-Buttons">action buttons</a>".  Once configured, these take the form of icons overlayed on the camera video feed that when pressed, can execute any script.  For example some of my use-cases include a light-bulb button that will execute a script that controls a lamp which is otherwise independent of the camera.  Or arrow icon buttons that are used to send the scripted commands that will pan or tilt the camera.</p>
			<p>For a while I used motioneye installed on a dedicated raspberry pi.  Later though, I began experimenting with <a href="https://www.home-assistant.io/">Home Assistant</a> with the intention to further integrate some services and automations I had in place.</p>
			<p>A feature of Home Assistant is the ability to install "<a href="https://www.home-assistant.io/addons/">Add-ons</a>", both <a href="https://github.com/home-assistant/addons">official</a> and <a href="https://github.com/hassio-addons/repository">community developed</a>, which effectively install containerised versions of independently available applications.  Motioneye is available as one such add-on: <a href="https://github.com/hassio-addons/addon-motioneye">addon-motioneye</a>.</p>
			<p>Rather than run Home Assistand and motioneye on separate boxes, I decided to migrate my motioneye configuration into the containerised Home Assistand add-on version.</p>
			<p>This worked well in every way except one; I lost the ability to implement action buttons.  For the action buttons to work, specifically named script files must be stored within a specific directory of the motioneye host.  This isn't possible for a containerised image since the scripts are user-specific.</p>
			<p>After some initial conversation via an <a href="https://github.com/hassio-addons/addon-motioneye/issues/74">issue</a> raised on GitHub and suggestions made by the maintainer <a href="https://github.com/frenck">Franck Nijhof</a>, I forked addon-motioneye to experiment and see if I could add the ability to implement action buttons.</p>
			<p>The solution was to define the action button names and script commans in the add-on configuration yaml via the Home Assistant interface, and modify the motioneye initialisation script so that it would generate the action button script files when the container is initialised.</p>
			<p>After some testing and incorporating feedback from frenck, the pull request was <a href="https://github.com/hassio-addons/addon-motioneye/pull/75">merged</a> and <a href="https://github.com/hassio-addons/addon-motioneye/pull/75/files">commits</a> incorporated into the next addon-motioneye release.</p> 
			<hr />
		</div>
	</body>
</html>
